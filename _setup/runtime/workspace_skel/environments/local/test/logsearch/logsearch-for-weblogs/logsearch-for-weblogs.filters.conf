if [@type] in ["syslog", "relp"] {
  # syslog/relp
  
  grok {
      match => { "@message" => "(?:%{INT:syslog6587_msglen} )?<%{POSINT:syslog_pri}>(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?(:)? %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      add_tag => [ "syslog_standard" ]
      tag_on_failure => ["_grokparsefailure-syslog_standard"]
  }
  
  if !("_grokparsefailure-syslog_standard" in [tags]) {
      syslog_pri { }
  
      date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
          timezone => "UTC"
      }
  
      # hostname: handle syslog configurations where hostname is localhost
      if ([syslog_hostname] == "localhost" ) {
          grok {
              match => { "received_from" => "%{IPORHOST:syslog_hostname}(?::%{POSINT:syslog_port})?" }
              overwrite => [ "syslog_hostname", "syslog_port" ]
              tag_on_failure => [ "_grokparsefailure-syslog_standard-hostname"]
          }
      }
  
      mutate {
          replace => [ "@source.host", "%{syslog_hostname}" ]
      }
  
      mutate {
          convert => [ "syslog5424_ver", "integer" ]
          convert => [ "syslog6587_msglen", "integer" ]
          remove_field => [
              #"syslog_pri",
              "syslog_hostname",
              "syslog_port",
              "syslog_timestamp"
          ]
      }
  
      if [syslog5424_ver] == 1 {
          grok {
              # I don't think this is rfc5424-legal because it says SD *must* exist and message *may* exist.
              # However, this makes parsing compatible with common syslog implementations.
              match => [ "syslog_message", "(?:%{DATA:syslog_procid}|\-) (?:%{DATA:syslog_msgid}|\-)(?: %{SYSLOG5424SD:syslog_sd}| \-)? %{GREEDYDATA:syslog_message}" ]
              overwrite => [
                  "syslog_message"
              ]
              tag_on_failure => [ "_grokparsefailure-syslog_standard-5424" ]
          }
  
          # structured-data
          if [syslog_sd] {
              grok {
                  match => [ "syslog_sd", "\[%{DATA:syslog_sd_id} (?<syslog_sd_params_raw]>[^\]]+)\]" ]
                  remove_field => [
                      "syslog_sd"
                  ]
                  tag_on_failure => [ "_grokparsefailure-syslog_standard-5424/sds" ]
              }
  
              if !("_grokparsefailure-syslog_standard-5424/sd" in [tags]) {
                  # convert the the key-value pairs
                  kv {
                      source => "syslog_sd_params_raw"
                      target => "syslog_sd_params"
                      remove_field => [
                          "syslog_sd_params_raw"
                      ]
                  }
              }
  
              # syslog_sd_params.@type should replace the syslog @type
              mutate {
                rename => [ "syslog_sd_params[@type]", "@type" ]
              }
          }
      }
  }
}

if [@type] == "nginx_combined" {
  grok {
    match => [ "@message", "%{IPORHOST:remote_addr} - (?:%{USER:remote_user}|-) \[%{HTTPDATE:time_local}\] \"(?:%{WORD:request_method} %{URIPATHPARAM:request_uri}(?: HTTP/%{NUMBER:request_httpversion})?|-)\" %{INT:status} (?:%{NONNEGINT:body_bytes_sent}|-) \"(?:%{URI:http_referer}|-)\" %{QS:http_user_agent} (?:%{NONNEGINT:request_time}|-)" ]
    match => [ "@message", "%{IPORHOST:remote_addr} - (?:%{USER:remote_user}|-) \[%{HTTPDATE:time_local}\] \"(?:%{WORD:request_method} %{URIPATHPARAM:request_uri}(?: HTTP/%{NUMBER:request_httpversion})?|-)\" %{INT:status} (?:%{NONNEGINT:body_bytes_sent}|-) \"(?:%{URI:http_referer}|-)\" %{QS:http_user_agent}" ]
    add_tag => "nginx"
    tag_on_failure => [ "fail/nginx_combined" ]
  }
  
  date {
    match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z" ]
    timezone => "UTC"
  }
  
  mutate {
    convert => [ "status", "integer" ]
    convert => [ "body_bytes_sent", "integer" ]
    convert => [ "request_time", "integer" ]
  }
  
  geoip {
  	source => "remote_addr"
  }

}

#
# src/logstash-filters/snippets/iis_tradingapi.conf.erb
#
if [@type] == "iis_tradingapi" {
  grok {
    match => [ "@message", "%{TIMESTAMP_ISO8601:datetime} %{QUOTEDSTRING:s_sitename} %{QUOTEDSTRING:s_computername} %{IP:s_ip} %{WORD:cs_method} %{URIPATH:cs_uri_stem} (?:%{NOTSPACE:cs_uri_query}|-) %{POSINT:s_port} (?:%{QUOTEDSTRING:cs_username}|-) %{IP:c_ip} (?:%{QUOTEDSTRING:cs_version}|-) (?:%{QUOTEDSTRING:cs_user_agent}|-) (?:%{QUOTEDSTRING:cs_cookie}|-) (?:%{QUOTEDSTRING:cs_referer}|-)(;*) (?:%{QUOTEDSTRING:cs_host}|-) %{POSINT:sc_status} %{INT:sc_substatus} %{INT:win32_status} %{NONNEGINT:sc_bytes} %{NONNEGINT:cs_bytes} %{NONNEGINT:time_taken} (?:%{QUOTEDSTRING:x_forwarded_for}|-)" ]
    match => [ "@message", "%{TIMESTAMP_ISO8601:datetime} %{HOST:s_sitename} %{HOST:s_computername} %{IP:s_ip} %{WORD:cs_method} %{URIPATHPARAM:cs_uri_stem} (?:%{NOTSPACE:cs_uri_query}|-) %{POSINT:s_port} (?:%{USER:cs_username}|-) %{IP:c_ip} (?:HTTP/%{NUMBER:cs_version}|-) (?:%{NOTSPACE:cs_user_agent}|-) (?:%{NOTSPACE:cs_cookie}|-) (?:%{URI:cs_referer}|-) (?:%{URIHOST:cs_host}|-) %{POSINT:sc_status} %{INT:sc_substatus} %{INT:win32_status} %{NONNEGINT:sc_bytes} %{NONNEGINT:cs_bytes} %{NONNEGINT:time_taken}" ]
    add_tag => "iis"
    add_tag => "iis_tradingapi"
    tag_on_failure => [ "fail/iis_tradingapi" ]
  }

  

    if [cs_method] == "POST" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/session$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "Authentication" ]
        add_field => [ "ci_tradingapi_servicename", "LogOn" ]
      }
    }

  

    if [cs_method] == "POST" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/session\/deleteSession$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "Authentication" ]
        add_field => [ "ci_tradingapi_servicename", "DeleteSession" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/useraccount\/ClientAndTradingAccount$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "AccountInformation" ]
        add_field => [ "ci_tradingapi_servicename", "GetClientAndTradingAccount" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/market\/\d+\/information$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "Market" ]
        add_field => [ "ci_tradingapi_servicename", "GetMarketInformation" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/spread\/markets$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "SpreadMarkets" ]
        add_field => [ "ci_tradingapi_servicename", "ListSpreadMarkets" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/news\/\w+\/\w+$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "News" ]
        add_field => [ "ci_tradingapi_servicename", "ListNewsHeadlinesWithSource" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/market\/\d+\/barhistory$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "PriceHistory" ]
        add_field => [ "ci_tradingapi_servicename", "GetPriceBars" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/(order\/)*order\/tradehistory$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "TradesAndOrders" ]
        add_field => [ "ci_tradingapi_servicename", "ListTradeHistory" ]
      }
    }

  

    if [cs_method] == "GET" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/order\/openpositions$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "TradesAndOrders" ]
        add_field => [ "ci_tradingapi_servicename", "ListOpenPositions" ]
      }
    }

  

    if [cs_method] == "POST" and [cs_uri_stem] =~ /(?i)^\/TradingApi\/order\/newtradeorder$/ {
      mutate {
        add_field => [ "ci_tradingapi_servicegroup", "TradesAndOrders" ]
        add_field => [ "ci_tradingapi_servicename", "Trade" ]
      }
    }

  

  date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss" ]
    timezone => "UTC"
  }

  mutate {
    convert => [ "s_port", "integer" ]
    convert => [ "sc_status", "integer" ]
    convert => [ "sc_substatus", "integer" ]
    convert => [ "win32_status", "integer" ]
    convert => [ "sc_bytes", "integer" ]
    convert => [ "cs_bytes", "integer" ]
    convert => [ "time_taken", "integer" ]
    gsub => [ "cs_referer", "\\+", " " ]

    #Remove the quotes from Grok QUOTEDSTRING matched
    gsub => ["s_sitename","\"",""]
    gsub => ["s_computername","\"",""]
    gsub => ["cs_version","\"",""]
    gsub => ["cs_username","\"",""]
    gsub => ["cs_user_agent","\"",""]
    gsub => ["cs_host","\"",""]
    gsub => ["cs_cookie","\"",""]
    gsub => ["cs_referer", "\"", ""]

    gsub => ["x_forwarded_for","[\s\\"]",""] # remove quotes and whitespace
    split => ["x_forwarded_for", ","] # format is client, proxy1, proxy2 ...
  }

  # a field value of - is considered to be null
  if [cs_uri_query] == '-' {
    mutate {
      remove_field => [ "cs_uri_query" ]
    }
  }

  # Parse cs_uri_query into key => value pairs
  if [cs_uri_query] {
    kv {
      source => "cs_uri_query"
      target => "cs_uri_query"
      field_split => "&?"
    }

    # If cs_user_agent is empty, populate from UserName in cs_uri_query (if it exists)
    if ! [cs_username] {
      if [cs_uri_query][UserName] {
        mutate {
          add_field => ["cs_username", "%{cs_uri_query][UserName]}"]
        }
      }
      if [cs_uri_query][Username] {
        mutate {
          add_field => ["cs_username", "%{cs_uri_query][Username]}"]
        }
      }
      if [cs_uri_query][username] {
        mutate {
          add_field => ["cs_username", "%{cs_uri_query][username]}"]
        }
      }
      if [cs_uri_query][userName] {
        mutate {
          add_field => ["cs_username", "%{cs_uri_query][userName]}"]
        }
      }
    }
  }

  # Uppercase all cs_username
  if [cs_username] {
    mutate {
      uppercase => ["cs_username"]
    }
  }

  # Replace c_ip with the actual client address from x_forwarded_for
  if [x_forwarded_for] {
    # Append the old c_ip to the x_forwarded_for array (it's the last proxy in the chain)
    mutate {
      add_field => ["x_forwarded_for", "%{c_ip}"]
    }
    mutate {
      replace => ["c_ip", "%{x_forwarded_for[0]}"]
    }
  }

  geoip {
    source => "c_ip"
  }
  
}
